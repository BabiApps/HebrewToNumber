import pytest
from app.parser import hebrew_to_number


valid_cases = [
    ("אפס", 0),
    ("אחת עשרה", 11),
    ("שש עשרה", 16),
    ("מאה עשרים ושלוש", 123),
    ("מאתיים חמישים ושבע", 257),
    ("אלף מאתיים שלושים וארבע", 1234),
    ("תשע מאות תשעים ותשע", 999),
    ("ארבע מאות חמישים ושבע", 457),
    ("עשר אלף", 10_000),

    ("אלף אפס", 1_000),
    ("מיליון", 1_000_000),
    ("שני מיליון", 2_000_000),
    ("מיליון ומאתיים שלושים אלף", 1_230_000),
    ("שלוש מאות אלף שש מאות ושבעים", 300_670),
    ("ארבעה מיליארד שלוש מאות מיליון", 4_300_000_000),
    ("תשע מאות אלף תשע מאות תשעים ותשע", 900_999),
    ("מיליון אחת", 1_000_001),

    ("שלושה מיליון מאתיים אלף", 3_200_000),
    ("חמישה מיליון מאה אלף", 5_100_000),
    ("מיליארד ושבע מאות אלף שלוש מאות תשעים ואחד", 1_000_700_391),
    ("שבע מאות שמונים ותשע אלף מאתיים שלושים ואחד", 789_231),
    ("מיליארד מיליון אלף", 1_001_001_000),

    ("חצי מיליון", 500_000),
    ("מיליון וחצי", 1_500_000),
    ("מיליון וחצי 3 אלף וחמש מאות 30", 1_503_530),
    ("שני מיליון וחצי", 2_500_000),
    ("אלף שלוש וחצי", 1_003.5),
    ("מאה אלף חצי", 100_000.5),
    ("חצי", 0.5),
    ("אחד וחצי", 1.5),

    ("67 אלף", 67_000.0),
    ("10.3 מיליון", 10_300_000.0),
    ("2.5 מיליארד", 2_500_000_000.0),
    ("0.5 מיליון", 500_000.0),
    ("3.1415 מיליון", 3_141_500.0),

    ("ועשרים", 20),
    ("ושש מאות", 600),
    ("וחמישה מיליון", 5_000_000),
    ("עשרים־שלושה אלף", 23_000),
    ("עשרים־שלושה אלף ארבע מאות", 23_400),

    ("תשע מאות תשעים ותשע מיליון תשע מאות תשעים ותשע אלף תשע מאות תשעים ותשע", 999_999_999),
    ("תשע מאות תשעים ותשע מיליארד תשע מאות תשעים ותשע מיליון תשע מאות תשעים ותשע אלף תשע מאות תשעים ותשע", 999_999_999_999),
]


invalid_cases = [
    "2 מליון ומיליון וחצי",
    "מליון מיליון",
    "אלף מיליון",
    "שלוש מאות מיליון מיליון",
    "חמש אלף אלף",
    "שלוש אלף אלף",
    "מיליון מיליון מיליון",
    "אלף אלף אלף",
    "מיליון שלוש מיליון",
    "מיליארד מיליארד",
    "אלף שלוש מאות אלף",
    "מיליון שלוש מאות מיליון מיליון",
    "חצי מיליון חצי",
    "שלוש חצי חצי",
    "חצי חצי",
    "מיליון חצי חצי",
]


@pytest.mark.parametrize("text,expected", valid_cases)
def test_hebrew_to_number_valid(text, expected):
    result = hebrew_to_number(text)
    # For floats, exact equality is fine here because inputs are deterministic
    assert result == expected


@pytest.mark.parametrize("text", invalid_cases)
def test_hebrew_to_number_invalid(text):
    with pytest.raises(ValueError):
        hebrew_to_number(text)
